@startuml Spring Application Flow

skinparam noteBackgroundColor #FEFECE
skinparam noteBorderColor #999999

actor "Browser" as browser
participant "Spring Security Filter Chain" as securityFilter
participant "SecurityConfig" as secConfig #E0FFE0
participant "OAuth2AuthorizationRequestResolver" as requestResolver
participant "OAuth2AuthorizationRequestRepository" as requestRepo
participant "OAuth2LoginAuthenticationFilter" as loginFilter
participant "OAuth2AuthorizedClientRepository" as clientRepo
participant "OAuth2AuthenticationToken" as authToken
participant "OAuth2AuthorizationCodeAuthenticationProvider" as authProvider
participant "OAuth2AuthorizationCodeAuthenticationToken" as codeAuthToken
participant "OAuth2AuthorizationResponse" as authResponse
participant "HomeController" as homeCtrl #E0FFE0
participant "LoggedInController" as loggedInCtrl #E0FFE0
participant "Authorization Server" as authServer #E0F0FF
participant "Token Endpoint" as tokenEndpoint #E0F0FF

== Application Startup ==
secConfig -> secConfig: configure(HttpSecurity)
activate secConfig
secConfig -> secConfig: oauth2Login()\ncustomize()
secConfig -> requestResolver: register()
secConfig -> requestRepo: register()
secConfig -> authProvider: register()
deactivate secConfig

== Initial Home Page Request ==
browser -> securityFilter: GET /\nCookie: JSESSIONID=<session_id>
securityFilter -> homeCtrl: index()
activate homeCtrl
homeCtrl --> browser: Home page view\nSet-Cookie: JSESSIONID=<session_id>
deactivate homeCtrl

== Initial Login Request ==
browser -> securityFilter: GET /oauth2/authorization/scotaccount\nCookie: JSESSIONID=<session_id>
activate securityFilter

securityFilter -> requestResolver: resolve(HttpServletRequest)
activate requestResolver
requestResolver -> requestResolver: generateState()\ngeneratePKCE()
note right
  Stores in session:
  - code_verifier
  - state
  - nonce
end note
requestResolver --> securityFilter: OAuth2AuthorizationRequest
deactivate requestResolver

securityFilter -> requestRepo: saveAuthorizationRequest(\nOAuth2AuthorizationRequest, \nHttpServletRequest, \nHttpServletResponse)
activate requestRepo
requestRepo --> securityFilter: void
deactivate requestRepo

securityFilter --> browser: 302 Redirect to Authorization Server\nLocation: /authorize?...\nSet-Cookie: JSESSIONID=<session_id>
deactivate securityFilter

== Authorization Server Interaction ==
browser -> authServer: GET /authorize\nQuery params:\n- client_id=scotaccount\n- response_type=code\n- redirect_uri=.../login/oauth2/code/scotaccount\n- scope=openid\n- state=<state>\n- code_challenge=<challenge>\n- code_challenge_method=S256\n- nonce=<nonce>
activate authServer
authServer --> browser: Login & Consent UI
browser -> authServer: POST credentials & consent\nContent-Type: application/x-www-form-urlencoded
authServer --> browser: 302 Redirect\nLocation: .../login/oauth2/code/scotaccount?code=<auth_code>&state=<state>
deactivate authServer

== Authorization Code Processing & State Verification ==
browser -> loginFilter: GET /login/oauth2/code/scotaccount\nQuery params:\n- code=<auth_code>\n- state=<state>\nCookie: JSESSIONID=<session_id>
activate loginFilter

loginFilter -> authResponse: create(HttpServletRequest)
activate authResponse
authResponse -> authResponse: extractState()
authResponse --> loginFilter: OAuth2AuthorizationResponse
deactivate authResponse

loginFilter -> requestRepo: loadAuthorizationRequest(HttpServletRequest)
activate requestRepo
note right
  Retrieves from session:
  - original state
  - code_verifier
  - nonce
end note
requestRepo --> loginFilter: OAuth2AuthorizationRequest
deactivate requestRepo

loginFilter -> loginFilter: validateState(\nOAuth2AuthorizationRequest,\nOAuth2AuthorizationResponse)
note right of loginFilter
  Verifies that:
  1. State exists in response
  2. State matches session stored state
  3. State not expired
end note

loginFilter -> codeAuthToken: create(\nOAuth2AuthorizationRequest,\nOAuth2AuthorizationResponse)
activate codeAuthToken
codeAuthToken --> loginFilter: OAuth2AuthorizationCodeAuthenticationToken
deactivate codeAuthToken

loginFilter -> authProvider: authenticate(Authentication)
activate authProvider
authProvider -> authProvider: validateState()
authProvider -> tokenEndpoint: POST /token\nContent-Type: application/x-www-form-urlencoded\nBody:\n- grant_type=authorization_code\n- code=<auth_code>\n- redirect_uri=.../login/oauth2/code/scotaccount\n- code_verifier=<verifier>
activate tokenEndpoint
tokenEndpoint --> authProvider: OAuth2AccessToken & ID Token
deactivate tokenEndpoint
authProvider --> loginFilter: Authentication
deactivate authProvider

loginFilter -> clientRepo: saveAuthorizedClient()
activate clientRepo
note right
  Stores in session:
  - access_token
  - refresh_token
  - id_token
end note
clientRepo --> loginFilter: void
deactivate clientRepo

loginFilter -> authToken: new OAuth2AuthenticationToken()
activate authToken
authToken --> loginFilter: authentication
deactivate authToken

loginFilter -> securityFilter: SecurityContextHolder.setContext()
loginFilter --> browser: 302 Redirect to /logged-in\nSet-Cookie: JSESSIONID=<session_id>
deactivate loginFilter

== Logged In Flow ==
browser -> securityFilter: GET /logged-in\nCookie: JSESSIONID=<session_id>
activate securityFilter
securityFilter -> loggedInCtrl: handleLoggedIn()
activate loggedInCtrl

loggedInCtrl -> clientRepo: loadAuthorizedClient()
activate clientRepo
note right
  Retrieves from session:
  - access_token
  - id_token
end note
clientRepo --> loggedInCtrl: OAuth2AuthorizedClient
deactivate clientRepo

loggedInCtrl -> loggedInCtrl: processTokens()\nstoreUserInfo()
loggedInCtrl --> browser: Logged in view with user info\nSet-Cookie: JSESSIONID=<session_id>
deactivate loggedInCtrl
deactivate securityFilter

== Protected Resource Access ==
browser -> securityFilter: GET /protected-resource\nCookie: JSESSIONID=<session_id>
activate securityFilter
securityFilter -> secConfig: checkAuthentication()
activate secConfig
secConfig --> securityFilter: authorized
deactivate secConfig
securityFilter -> clientRepo: loadAuthorizedClient()
activate clientRepo
note right
  Retrieves from session:
  - access_token
end note
clientRepo --> securityFilter: OAuth2AuthorizedClient
deactivate clientRepo
securityFilter -> loggedInCtrl: handleProtectedRequest()
activate loggedInCtrl
loggedInCtrl --> browser: Protected Resource Content\nSet-Cookie: JSESSIONID=<session_id>
deactivate loggedInCtrl
deactivate securityFilter

@enduml 